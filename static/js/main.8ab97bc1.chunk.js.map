{"version":3,"sources":["Enums/EAccents.ts","Enums/ENoteTypes.ts","Enums/EStickings.ts","Enums/ENoteDuration.ts","Enums/ENotePlacement.ts","models/Note.ts","models/Measure.ts","models/Exercise.ts","engines/RandomizerEngine.ts","engines/ValidationEngine.ts","Enums/EStickingStyle.ts","engines/ExcerciseEngine.ts","models/GenerateSheetMusicConfig.ts","models/Header.ts","commonComponents/NumberSelectTab.tsx","commonComponents/SwitchArrayTab.tsx","audioComponents/AudioSampler.ts","App.tsx","text/Descriptions.ts","serviceWorker.ts","index.tsx"],"names":["EAccents","ENoteTypes","EStickings","ENoteDuration","ENotePlacement","Note","noteType","rest","duration","sixteenth","sticking","None","accent","notAccented","placedByUser","this","Measure","subdivision","notes","noteDuration","eighth","quarter","half","Error","i","push","none","Exercise","sheetMusic","measures","bpm","length","measure","snare","RandomizerEngine","items","constraints","termination","result","newItem","getRandomItemSelection","previousItems","itemsToAdd","insertion","forEach","item","added","randomItem","inputArray","shouldIgnore","j","Math","floor","random","min","max","ValidationEngine","configIsValid","config","errorList","notePlacementsValid","notePlacementsAreValid","maxConsecutiveNotesValid","maxConsecutiveNotesAreValid","noteCountsValid","noteCountsAreValid","notePlacementsDoNotExceedCounts","notePlacementsDoNotExceedNoteCounts","snares","snareNoteCountEnabled","snareNoteCount","kicks","kickNoteCountEnabled","kickNoteCount","rests","restNoteCountEnabled","restNoteCount","accents","accentNoteCountEnabled","accentNoteCount","maxConsecutiveSnares","maxConsecutiveKicks","maxConsecutiveAccents","maxConsecutiveRests","lefts","maxConsecutiveLeftHandStickings","rights","maxConsecutiveRightHandStickings","mandatorySnarePlacements","mandatoryKickPlacements","mandatoryAccentPlacements","mandatoryRestPlacements","snareHasDuplicates","Set","size","kicksHasDuplicates","accentsHasDuplicates","restsHasDuplicates","overlappingSnareAndKickNotes","filter","value","includes","overlappingSnareAndRestNotes","overlappingKickAndSnareNotes","overlappingKickAndRestNotes","overlappingRestAndSnareNotes","overlappingRestAndKickNotes","snarePlacements","kickPlacements","accentPlacements","restPlacements","snaresValid","kicksValid","accentsValid","restsValid","EStickingStyle","ExerciseEngine","generateNewSheetMusic","header","generateHeaderString","generateMeasure","Array","isArray","addStickingToMeasure","addAccentsToMeasure","formattedResult","format","abcjsString","e","message","title","meter","composer","key","translateLengthToFractionString","resultString","note","index","noteString","Left","Right","accented","kick","stickingStyle","alternating","lastHit","naturalSticking","randomIndex","randomNumberInRange","rightHandDoesNotExceedCount","noteVarietyDoesNotExceedConsecutiveCount","noteToCheck","leftHandDoesNotExceedCount","placement","mapNotePlacementToIndex","count","availableSnares","addNoteCountToMeasure","randomValidUnsetAccent","firstUnsetNoteType","find","notesChecked","shouldIgnoreInShufflingNotes","addMandatoryNotesToEmptyMeasure","keepTrying","retryCount","shuffleArray","optionsChecked","acceptableNoteFound","maximumNumber","mandatoryNotes","noteAtIndex","getNoteToUpdate","noteToUpdate","one","oneE","oneAnd","oneA","two","twoE","twoAnd","twoA","three","threeE","threeAnd","threeA","four","fourE","fourAnd","fourA","isNoteVariety","consecutiveCount","hasNotSurpassedConsecutiveCount","GenerateSheetMusicConfig","translateLengthToInt","Header","NumberSelectTab","props","setConfig","selection","setSelection","mode","description","React","useState","top","rand","left","transform","modalStyle","descriptionOpen","setDescriptionOpen","getConfigFieldFromSelection","checked","classes","makeStyles","theme","createStyles","root","display","flexDirection","alignItems","margin","spacing","formControl","minWidth","cardRoot","marginTop","justifyContent","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","bullet","fontSize","pos","marginBottom","input","height","useStyles","round","Card","className","CardHeader","CardContent","FormControl","InputLabel","id","Select","labelId","onChange","event","target","MenuItem","FormControlLabel","label","control","Switch","newConfig","name","component","FormLabel","setConfigFieldFromSelection","onClick","Modal","open","onClose","style","SwitchArrayTab","help","switchIdentifier","handleChange","notePlacement","parseInt","addConfigFieldFromSelection","findIndex","splice","removeConfigFieldFromSelection","FormGroup","AudioSampler","context","buffer","source","gain","createBufferSource","createGain","connect","destination","time","setup","setValueAtTime","start","App","savedExercises","setSavedExercises","currentExercise","setCurrentExercise","exercisesGenerated","setExercisesGenerated","constraintTabIndex","setConstraintTabIndex","constraintOpen","setConstraintOpen","stickingDescriptionOpen","setStickingDescriptionOpen","pageDescriptionOpen","setPageDescriptionOpen","consecutiveHitsSelection","setConsecutiveHitsSelection","noteCountSelection","setNoteCountSelection","mandatoryNotePlacementSelection","setMandatoryNotePlacementSelection","measureName","setMeasureName","setErrorList","hiHatOnPlayback","setHiHatOnPlayback","playTrack","exercise","sixteenthNoteInterval","audioContext","AudioContext","sampleLoader","url","callback","request","XMLHttpRequest","responseType","onload","decodeAudioData","response","withCredentials","send","hasAccents","hiHat","unaccentedHit","trigger","currentTime","useEffect","newErrorList","toolTip","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","tabProps","Button","variant","color","map","abcNotation","parserParams","engraverParams","responsive","renderParams","viewportHorizontal","firstIndexOfExercise","indexOf","savedExercisesCopy","TextField","marginLeft","currentExerciseCopy","CardActions","Tooltip","cursor","disabled","newExercise","AppBar","Tabs","newValue","aria-label","Tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8ab97bc1.chunk.js","sourcesContent":["enum EAccents {\r\n    notAccented,\r\n    accented,\r\n}\r\nexport default EAccents;","enum ENoteTypes {\r\n    snare,\r\n    kick,\r\n    rest,\r\n    none\r\n}\r\n\r\nexport default ENoteTypes","enum EStickings {\r\n    None,\r\n    Right,\r\n    Left\r\n}\r\n\r\nexport default EStickings;","enum ENoteDuration {\r\n    none,\r\n    sixteenth,\r\n    eighth ,\r\n    dottedEighth,\r\n    quarter,\r\n    dottedQuarter,\r\n    half\r\n}\r\n\r\nexport default ENoteDuration;","enum ENotePlacement {\r\n    \r\n    one,\r\n    oneE,\r\n    oneAnd,\r\n    oneA,\r\n    two,\r\n    twoE,\r\n    twoAnd,\r\n    twoA,\r\n    three,\r\n    threeE,\r\n    threeAnd,\r\n    threeA,\r\n    four,\r\n    fourE,\r\n    fourAnd,\r\n    fourA\r\n}\r\n\r\nexport default ENotePlacement;","import EAccents from '../Enums/EAccents';\r\nimport ENoteTypes from '../Enums/ENoteTypes';\r\nimport EStickings from '../Enums/EStickings';\r\nimport ENoteDuration from '../Enums/ENoteDuration';\r\n\r\nclass Note {\r\n\r\n    sticking: EStickings;\r\n    accent: EAccents;\r\n    noteType: ENoteTypes;\r\n    duration: ENoteDuration;\r\n    placedByUser: boolean;\r\n\r\n    constructor(noteType = ENoteTypes.rest, duration: ENoteDuration = ENoteDuration.sixteenth, sticking: EStickings = EStickings.None, accent = EAccents.notAccented, placedByUser: boolean = false) {\r\n        this.noteType = noteType;\r\n        this.sticking = sticking;\r\n        this.accent = accent;\r\n        this.duration = duration;\r\n        this.placedByUser = placedByUser;\r\n    }\r\n}\r\n\r\nexport default Note;","import Note from './Note';\r\nimport ENoteTypes from \"../Enums/ENoteTypes\";\r\nimport ENoteDuration from \"../Enums/ENoteDuration\";\r\n\r\nclass Measure {\r\n    \r\n    notes: Note[];\r\n    \r\n    constructor(subdivision: number) {\r\n        this.notes = [];\r\n        let noteDuration = ENoteDuration.sixteenth;\r\n        \r\n        switch(subdivision) {\r\n            case 16:  \r\n                noteDuration = ENoteDuration.sixteenth;\r\n                break;\r\n            case 8:\r\n                noteDuration = ENoteDuration.eighth;\r\n                break;\r\n            case 4:\r\n                noteDuration = ENoteDuration.quarter;\r\n                break;\r\n            case 2:\r\n                noteDuration = ENoteDuration.half;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported subdivision');\r\n        }\r\n        \r\n        for (let i = 0; i < subdivision; i++) {\r\n            this.notes.push(new Note(ENoteTypes.none, noteDuration));\r\n        }\r\n    }\r\n}\r\n\r\nexport default Measure;","import Measure from \"./Measure\";\r\nimport ENoteTypes from \"../Enums/ENoteTypes\";\r\n\r\nclass Exercise {\r\n    \r\n    sheetMusic: string;\r\n    measures: Measure[];\r\n    bpm: number;\r\n    \r\n    constructor(sheetMusic: string, measures: Measure[], bpm: number = 80) {\r\n        this.sheetMusic = sheetMusic;\r\n        this.measures = measures;\r\n        this.bpm = bpm;\r\n        \r\n        if (!measures || measures.length === 0) {\r\n            const measure = new Measure(16);\r\n            for(let i = 0; i < 16; i++) {\r\n                measure.notes[i].noteType = ENoteTypes.snare;\r\n            }\r\n            measures.push(measure);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Exercise;","\r\nclass RandomizerEngine {\r\n    // Main entry point All configurations should be passed in here\r\n    public static getRandomCollectionWithConstraint<T>(items: Array<T>,\r\n                                                       constraints: (arraySoFar: Array<T>) => boolean,\r\n                                                       termination: (arraySoFar: Array<T>) => boolean) {\r\n        const result: T[] = [];\r\n        while (!termination(result)) {\r\n            let newItem = getRandomItemSelection(items);\r\n            if (constraints([...result, newItem])) {\r\n                result.push(newItem);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static addRandomPropertyToRandomCollection<T, G>(previousItems: T[], itemsToAdd: G[],\r\n                                                            constraints: (arraySoFar: T[]) => boolean,\r\n                                                            insertion: (previousItem: T, newItem: G) => T) {\r\n\r\n        const result: T[] = [];\r\n\r\n        previousItems.forEach((item) => {\r\n            let added = false;\r\n            while (!added) {\r\n                const randomItem = getRandomItemSelection(itemsToAdd);\r\n                const newItem = insertion(item, randomItem);\r\n                if (constraints([...result, newItem])) {\r\n                    result.push(newItem);\r\n                    added = true;\r\n                }\r\n            }\r\n\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public static shuffleArray<T>(inputArray: T[], shouldIgnore: (item: T) => boolean): void {\r\n        for (let i = inputArray.length - 1; i > 0; i--) {\r\n            if (shouldIgnore(inputArray[i])) {\r\n                continue;\r\n            }\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            if (shouldIgnore(inputArray[j])) {\r\n                continue;\r\n            }\r\n            [inputArray[i], inputArray[j]] = [inputArray[j], inputArray[i]];\r\n        }\r\n    }\r\n    \r\n    public static randomNumberInRange (min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n}\r\n\r\nconst getRandomItemSelection = (items: Array<any>) => {\r\n    return items[Math.floor(Math.random() * items.length)];\r\n};\r\n\r\nexport default RandomizerEngine;","import GenerateSheetMusicConfig from \"../models/GenerateSheetMusicConfig\";\r\n\r\nclass ValidationEngine {\r\n\r\n    public static configIsValid = (config: GenerateSheetMusicConfig, errorList: string[]): boolean => {\r\n        const notePlacementsValid = ValidationEngine.notePlacementsAreValid(config, errorList);\r\n        const maxConsecutiveNotesValid: boolean = ValidationEngine.maxConsecutiveNotesAreValid(config, errorList);\r\n        const noteCountsValid: boolean = ValidationEngine.noteCountsAreValid(config, errorList);\r\n        const notePlacementsDoNotExceedCounts = ValidationEngine.notePlacementsDoNotExceedNoteCounts(config, errorList);\r\n\r\n        return notePlacementsValid && maxConsecutiveNotesValid && noteCountsValid && notePlacementsDoNotExceedCounts;\r\n\r\n    };\r\n\r\n    private static noteCountsAreValid = (config: GenerateSheetMusicConfig, errorList: string[]): boolean => {\r\n        // for the lifetime of this function:\r\n        // -1 means any amount of that note is allowed\r\n        // 0 means the note is disabled\r\n        // 1+ means there are exactly that many notes of the type\r\n        \r\n        const subdivision = config.subdivision;\r\n        let result = true;\r\n\r\n        const snares = config.snareNoteCountEnabled ? config.snareNoteCount : -1;\r\n        const kicks = config.kickNoteCountEnabled ? config.kickNoteCount : -1;\r\n        const rests = config.restNoteCountEnabled ? config.restNoteCount : -1;\r\n        const accents = config.accentNoteCountEnabled ? config.accentNoteCount : -1;\r\n\r\n        // all note counts are disabled, auto valid\r\n        if (snares === -1 && kicks === -1 && rests === -1 && accents === -1) {\r\n            result = true;\r\n        }\r\n\r\n        // nothing in enabled!\r\n        if (snares === 0 && rests === 0 && kicks === 0){\r\n            errorList.push('All Note Counts set to zero. ');\r\n            result = false;\r\n        }\r\n\r\n        // an option is too big\r\n        if (snares > subdivision || kicks > subdivision || accents > subdivision || rests > subdivision) {\r\n            errorList.push('One of your exact note counts is higher than your subdivision. ');\r\n            result = false\r\n        }\r\n\r\n        // // if you specify kicks and snares and rests, you have specified everything so it must equal the subdivision\r\n        if ((snares >= 0 && kicks >= 0 && rests >= 0) && (snares + kicks + rests !== subdivision)) {\r\n            errorList.push('You have all note types specified but they do not add up to your subdivision. ');\r\n            result = false;\r\n        }\r\n\r\n        // if you have accents specified, it can't exceed the available room for snares\r\n        if (accents > snares && snares !== -1) {\r\n            errorList.push('You have more accents specified than snares, not all notes can be accented. ');\r\n            result = false\r\n        }\r\n        \r\n        if (snares + kicks + rests > subdivision) {\r\n            errorList.push('You have more notes specified than allowed in a measure per the subdivision. ');\r\n            result = false\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    private static maxConsecutiveNotesAreValid = (config: GenerateSheetMusicConfig, errorList: string[]): boolean => {\r\n        let result = true;\r\n        \r\n        const snares = config.maxConsecutiveSnares;\r\n        const kicks = config.maxConsecutiveKicks;\r\n        const accents = config.maxConsecutiveAccents;\r\n        const rests = config.maxConsecutiveRests;\r\n        const lefts = config.maxConsecutiveLeftHandStickings;\r\n        const rights = config.maxConsecutiveRightHandStickings;\r\n        \r\n        if (config.snareNoteCountEnabled) {\r\n            if (Math.floor(config.maxConsecutiveSnares/(config.maxConsecutiveSnares + 1) * 16) + 1 < config.snareNoteCount) {\r\n                errorList.push('Impossible arrangement. Need either more consecutive snares allowed or fewer snare notes');\r\n                result = false;\r\n            }\r\n        }\r\n        if (config.kickNoteCountEnabled) {\r\n            if (Math.floor(config.maxConsecutiveKicks/(config.maxConsecutiveKicks + 1) * 16) + 1 < config.kickNoteCount) {\r\n                errorList.push('Impossible arrangement. Need either more consecutive kicks allowed or fewer kick notes');\r\n                result = false;\r\n            }\r\n        }\r\n        if (config.restNoteCountEnabled) {\r\n            if (Math.floor(config.maxConsecutiveRests/(config.maxConsecutiveRests + 1) * 16) + 1 < config.restNoteCount) {\r\n                errorList.push('Impossible arrangement. Need either more consecutive snares allowed or fewer snare notes');\r\n                result = false;\r\n            }\r\n        }\r\n        \r\n        // any max consecutive is fine, but you can't have 0. Use noteCount to turn off a note Type\r\n        if (snares === 0 || kicks === 0 || accents === 0 || rests === 0 || lefts === 0 || rights === 0) {\r\n            errorList.push('You cannot set maxConsecutive to 0. Use Note Count toggle to turn off a note type. ');\r\n            result = false;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    private static notePlacementsAreValid = (config: GenerateSheetMusicConfig, errorList: string[]): boolean => {\r\n        const snares = config.mandatorySnarePlacements;\r\n        const kicks = config.mandatoryKickPlacements;\r\n        const accents = config.mandatoryAccentPlacements;\r\n        const rests = config.mandatoryRestPlacements;\r\n        \r\n        const subdivision = config.subdivision;\r\n        let result = true;\r\n\r\n        // nobody can have more than available notes\r\n        if (snares.length > subdivision || kicks.length > subdivision || accents.length > subdivision || rests.length > subdivision) {\r\n            errorList.push('One of your mandatory notes placed is bigger than your subdivision allows. ');\r\n            result = false\r\n        }\r\n\r\n        // kicks/snares/rests are mutually exclusive right now\r\n        // TODO: Refactor for non-linear patterns\r\n        if (snares.length + kicks.length + rests.length > subdivision) {\r\n            errorList.push('You have more mandatory notes placed than your subdivision allows. ');\r\n            result = false\r\n        }\r\n\r\n        // check for duplicates\r\n        const snareHasDuplicates = (new Set(snares)).size !== snares.length;\r\n        const kicksHasDuplicates = (new Set(kicks)).size !== kicks.length;\r\n        const accentsHasDuplicates = (new Set(accents)).size !== accents.length;\r\n        const restsHasDuplicates = (new Set(rests)).size !== rests.length;\r\n\r\n        if (snareHasDuplicates || kicksHasDuplicates || accentsHasDuplicates || restsHasDuplicates) {\r\n            errorList.push('One of your mandatory note placements has duplicates. ');\r\n            result = false\r\n        }\r\n\r\n        // can't have overlapping notes right now\r\n        const overlappingSnareAndKickNotes = snares.filter(value => kicks.includes(value));\r\n        const overlappingSnareAndRestNotes = snares.filter(value => rests.includes(value));\r\n        const overlappingKickAndSnareNotes = kicks.filter(value => snares.includes(value));\r\n        const overlappingKickAndRestNotes = kicks.filter(value => rests.includes(value));\r\n        const overlappingRestAndSnareNotes = rests.filter(value => snares.includes(value));\r\n        const overlappingRestAndKickNotes = rests.filter(value => kicks.includes(value));\r\n\r\n        if (!(overlappingSnareAndKickNotes.length === 0 &&\r\n            overlappingSnareAndRestNotes.length === 0 &&\r\n            overlappingKickAndSnareNotes.length === 0 &&\r\n            overlappingKickAndRestNotes.length === 0 &&\r\n            overlappingRestAndSnareNotes.length === 0 &&\r\n            overlappingRestAndKickNotes.length === 0)) {\r\n            \r\n            errorList.push('Two note types have the same placement. ');\r\n            result = false;\r\n        }\r\n        \r\n        return result;\r\n    };\r\n\r\n    private static notePlacementsDoNotExceedNoteCounts = (config: GenerateSheetMusicConfig, errorList: string[]) => {\r\n        const snarePlacements = config.mandatorySnarePlacements;\r\n        const kickPlacements = config.mandatoryKickPlacements;\r\n        const accentPlacements = config.mandatoryAccentPlacements;\r\n        const restPlacements = config.mandatoryRestPlacements;\r\n        const snares = config.snareNoteCount;\r\n        const kicks = config.kickNoteCount;\r\n        const rests = config.restNoteCount;\r\n        const accents = config.accentNoteCount;\r\n\r\n        const snaresValid = snarePlacements.length <= snares || !config.snareNoteCountEnabled;\r\n        const kicksValid = kickPlacements.length <= kicks || !config.kickNoteCountEnabled;\r\n        const accentsValid = accentPlacements.length <= accents || !config.accentNoteCountEnabled;\r\n        const restsValid = restPlacements.length <= rests || !config.restNoteCountEnabled;\r\n\r\n        if (!(snaresValid && kicksValid && restsValid && accentsValid)) {\r\n            errorList.push('If you have exact note count turned on, it must be higher than the number of exact placements you specify. ');\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    };\r\n}\r\n\r\nexport default ValidationEngine;","enum EStickingStyle {\r\n    none,\r\n    naturalSticking,\r\n    alternating,\r\n    random\r\n}\r\n\r\nexport default EStickingStyle;","import GenerateSheetMusicConfig from '../models/GenerateSheetMusicConfig';\r\nimport RandomizerEngine from './RandomizerEngine';\r\nimport Measure from '../models/Measure';\r\nimport ENoteTypes from \"../Enums/ENoteTypes\";\r\nimport ENotePlacement from \"../Enums/ENotePlacement\";\r\nimport ValidationEngine from \"./ValidationEngine\";\r\nimport Note from \"../models/Note\";\r\nimport Header from \"../models/Header\";\r\nimport EStickings from \"../Enums/EStickings\";\r\nimport EAccents from \"../Enums/EAccents\";\r\nimport EStickingStyle from \"../Enums/EStickingStyle\";\r\n\r\nclass ExerciseEngine {\r\n    // Main entry point All configurations should be passed in here\r\n    public static generateNewSheetMusic = (config: GenerateSheetMusicConfig) => {\r\n        try {\r\n            const header = generateHeaderString(config.header);\r\n            const measure = generateMeasure(config);\r\n            if (Array.isArray(measure)) {\r\n                return measure;\r\n            }\r\n            addStickingToMeasure(measure, config);\r\n            addAccentsToMeasure(measure, config);\r\n            const formattedResult = format(measure);\r\n            return {\r\n                abcjsString: `${header}${formattedResult}`,\r\n                measures: [measure]\r\n            }\r\n        } catch (e) {\r\n            return e.message;\r\n        }\r\n    };\r\n}\r\n\r\nconst generateHeaderString = (header: Header) => {\r\n    return `X:1\\nT:${header.title}\\nM:${header.meter}\\nC:${header.composer}\\nK:${header.key}\\nL:${header.translateLengthToFractionString()}\\n`\r\n};\r\n\r\nconst format = (measure: Measure) => {\r\n\r\n    let resultString = '';\r\n    // Add in the note groupings, add a space every 4 units\r\n    measure.notes.forEach((note, index) => {\r\n        let noteString = index % 4 === 0 ? ' ' : '';\r\n        if (note.sticking === EStickings.Left) {\r\n            noteString = noteString + `\"L\"`;\r\n        }\r\n        if (note.sticking === EStickings.Right) {\r\n            noteString = noteString + `\"R\"`;\r\n        }\r\n        if (note.accent === EAccents.accented) {\r\n            noteString = noteString + `!>!`;\r\n        }\r\n        if (note.noteType === ENoteTypes.snare) {\r\n            noteString = noteString + 'c';\r\n        }\r\n        if (note.noteType === ENoteTypes.kick) {\r\n            noteString = noteString + 'f,';\r\n        }\r\n        if (note.noteType === ENoteTypes.rest) {\r\n            noteString = noteString + 'z';\r\n        }\r\n        resultString += noteString;\r\n    });\r\n    return `|:${resultString}:|`\r\n};\r\n\r\nconst addStickingToMeasure = (measure: Measure, config: GenerateSheetMusicConfig): Measure => {\r\n    switch (config.stickingStyle) {\r\n        case EStickingStyle.none:\r\n            break;\r\n        case EStickingStyle.alternating:\r\n            let lastHit = EStickings.Left;\r\n            measure.notes.forEach((note) => {\r\n                if (note.noteType === ENoteTypes.snare) {\r\n                    if (lastHit === EStickings.Right) {\r\n                        note.sticking = EStickings.Left;\r\n                    } else {\r\n                        note.sticking = EStickings.Right;\r\n                    }\r\n                    lastHit = lastHit === EStickings.Right ? EStickings.Left : EStickings.Right;\r\n                } else {\r\n                    lastHit = EStickings.Left;\r\n                }\r\n            });\r\n            break;\r\n        case EStickingStyle.naturalSticking:\r\n            measure.notes.forEach((note, index) => {\r\n                if (note.noteType === ENoteTypes.snare) {\r\n                    if (index % 2 === 0) {\r\n                        note.sticking = EStickings.Right\r\n                    } else {\r\n                        note.sticking = EStickings.Left\r\n                    }\r\n                }\r\n            });\r\n            break;\r\n        case EStickingStyle.random:\r\n            measure.notes.forEach((note) => {\r\n                if (note.noteType === ENoteTypes.snare) {\r\n                    const randomIndex = RandomizerEngine.randomNumberInRange(1, 2);\r\n                    note.sticking = randomIndex as EStickings;\r\n                    const rightHandDoesNotExceedCount = noteVarietyDoesNotExceedConsecutiveCount(measure, \r\n                        config.maxConsecutiveRightHandStickings,\r\n                        (noteToCheck: Note) => {\r\n                            return noteToCheck.sticking === EStickings.Right\r\n                        });\r\n                    const leftHandDoesNotExceedCount = noteVarietyDoesNotExceedConsecutiveCount(measure, \r\n                        config.maxConsecutiveLeftHandStickings,\r\n                        (noteToCheck: Note) => {\r\n                            return noteToCheck.sticking === EStickings.Left\r\n                        });\r\n                    if (!(rightHandDoesNotExceedCount && leftHandDoesNotExceedCount)) {\r\n                        note.sticking = randomIndex as EStickings === EStickings.Right ? EStickings.Left: EStickings.Right;\r\n                    }\r\n                }\r\n            });\r\n\r\n            break;\r\n    }\r\n    return measure;\r\n};\r\n\r\nconst addAccentsToMeasure = (measure: Measure, config: GenerateSheetMusicConfig): Measure => {\r\n    config.mandatoryAccentPlacements.forEach((placement) => {\r\n        const note = measure.notes[mapNotePlacementToIndex(placement)];\r\n        if (note.noteType === ENoteTypes.snare){\r\n            note.accent = EAccents.accented;\r\n        }\r\n    });\r\n\r\n    if (config.accentNoteCount === 0) {\r\n        return measure;\r\n    }\r\n\r\n    let count = config.accentNoteCount - config.mandatoryAccentPlacements.length;\r\n    let availableSnares = measure.notes.filter((note) => {\r\n        return note.noteType === ENoteTypes.snare;\r\n    });\r\n    \r\n    count = count > availableSnares.length ? availableSnares.length : count;\r\n    \r\n    if (config.accentNoteCountEnabled) {\r\n        addNoteCountToMeasure(measure, config,null, EAccents.accented, null, randomValidUnsetAccent, count);\r\n    }\r\n    \r\n    return measure;\r\n};\r\n\r\nconst firstUnsetNoteType = (measure: Measure, config: GenerateSheetMusicConfig): Note => {\r\n    let result = measure.notes.find((note) => {\r\n        return note.noteType === ENoteTypes.none;\r\n    });\r\n    \r\n    if (!result) {\r\n        throw Error(\"No Unset Notes. Generation failure! Please reload the page!\");\r\n    }\r\n    return result;\r\n};\r\n\r\nconst randomValidUnsetAccent = (measure: Measure, config: GenerateSheetMusicConfig): Note => {\r\n    const notesChecked: Note[] = [];\r\n    \r\n    while(notesChecked.length < measure.notes.length) {\r\n        const randomIndex = RandomizerEngine.randomNumberInRange(0, measure.notes.length-1);\r\n        const note = measure.notes[randomIndex];\r\n        \r\n        if (notesChecked.includes(note)) {\r\n            continue;\r\n        }\r\n        \r\n        if (note.noteType === ENoteTypes.rest || note.noteType === ENoteTypes.kick || note.noteType === ENoteTypes.none || note.accent === EAccents.accented) {\r\n            notesChecked.push(note);\r\n            continue;\r\n        }\r\n        \r\n        const isAccentedNote = (note: Note): boolean => {\r\n            return note.accent === EAccents.accented;\r\n        };\r\n        \r\n        note.accent = EAccents.accented;\r\n        \r\n        if (!noteVarietyDoesNotExceedConsecutiveCount(measure, config.maxConsecutiveAccents, isAccentedNote)) {\r\n            note.accent = EAccents.notAccented;\r\n            notesChecked.push(note);\r\n        } else {\r\n            return note;\r\n        }\r\n    }\r\n    \r\n    throw Error(\"No place to put your accent. Generation failure! Please reload the page!\");\r\n};\r\n\r\nconst shouldIgnoreInShufflingNotes = (note: Note) => {\r\n    return note.placedByUser;\r\n};\r\n\r\nconst generateMeasure = (config: GenerateSheetMusicConfig): Measure | string[] => {\r\n\r\n    const errorList: string[] = [];\r\n    if (!ValidationEngine.configIsValid(config, errorList)) {\r\n        return errorList;\r\n    }\r\n\r\n    const measure = new Measure(config.subdivision);\r\n\r\n    addMandatoryNotesToEmptyMeasure(measure, ENoteTypes.snare, config.mandatorySnarePlacements);\r\n    addMandatoryNotesToEmptyMeasure(measure, ENoteTypes.kick, config.mandatoryKickPlacements);\r\n    addMandatoryNotesToEmptyMeasure(measure, ENoteTypes.rest, config.mandatoryRestPlacements);\r\n    \r\n    let count = 0;\r\n    if (config.snareNoteCountEnabled) {\r\n        count = config.snareNoteCount - config.mandatorySnarePlacements.length;\r\n        addNoteCountToMeasure(measure, config, ENoteTypes.snare, null, null, firstUnsetNoteType, count);\r\n    }\r\n    if (config.kickNoteCountEnabled) {\r\n        count = config.kickNoteCount - config.mandatoryKickPlacements.length;\r\n        addNoteCountToMeasure(measure, config, ENoteTypes.kick, null, null, firstUnsetNoteType, count);\r\n    }\r\n    if (config.restNoteCountEnabled) {\r\n        count = config.restNoteCount - config.mandatoryRestPlacements.length;\r\n        addNoteCountToMeasure(measure, config, ENoteTypes.rest, null, null, firstUnsetNoteType, count);\r\n    }\r\n\r\n    //shuffle\r\n    let keepTrying = true;\r\n    let retryCount = 0;\r\n    while (keepTrying || retryCount >= 1000) {\r\n        RandomizerEngine.shuffleArray<Note>(measure.notes, shouldIgnoreInShufflingNotes);\r\n        if (\r\n            noteVarietyDoesNotExceedConsecutiveCount(measure, config.maxConsecutiveSnares, (note) => {\r\n                return note.noteType === ENoteTypes.snare\r\n            }) &&\r\n            noteVarietyDoesNotExceedConsecutiveCount(measure, config.maxConsecutiveKicks, (note) => {\r\n                return note.noteType === ENoteTypes.kick\r\n            }) &&\r\n            noteVarietyDoesNotExceedConsecutiveCount(measure, config.maxConsecutiveRests, (note) => {\r\n                return note.noteType === ENoteTypes.rest\r\n            })\r\n        ) {\r\n            keepTrying = false;\r\n        }\r\n        retryCount += 1;\r\n    }\r\n    \r\n    if (retryCount >= 1000){\r\n        throw Error(\"Could not find a suitable arrangement in 1000 attempts. Generation Failure. Please reload the page!\");\r\n    }\r\n\r\n    // fill in remaining notes\r\n    const remainingNotes = measure.notes.filter((note) => {\r\n        return note.noteType === ENoteTypes.none;\r\n    });\r\n\r\n    remainingNotes.forEach((note) => {\r\n        const optionsChecked: ENoteTypes[] = [];\r\n        let acceptableNoteFound = false;\r\n\r\n        while (!acceptableNoteFound) {\r\n            if (optionsChecked.length === 3) {\r\n                throw new Error(\"No where to place note. Generation failure! Please reload the page!\");\r\n            }\r\n\r\n            const randomIndex = RandomizerEngine.randomNumberInRange(0, 2);\r\n            const noteType = randomIndex === 0 ? ENoteTypes.snare : randomIndex === 1 ? ENoteTypes.kick : ENoteTypes.rest;\r\n            if (!optionsChecked.includes(noteType)) {\r\n                note.noteType = noteType;\r\n\r\n                let maximumNumber = 0;\r\n                switch (noteType) {\r\n                    case ENoteTypes.snare:\r\n                        if (config.snareNoteCountEnabled) {\r\n                            note.noteType = ENoteTypes.none;\r\n                            optionsChecked.push(noteType);\r\n                            continue;\r\n                        }\r\n                        maximumNumber = config.maxConsecutiveSnares;\r\n                        break;\r\n                    case ENoteTypes.kick:\r\n                        if (config.kickNoteCountEnabled) {\r\n                            note.noteType = ENoteTypes.none;\r\n                            optionsChecked.push(noteType);\r\n                            continue;\r\n                        }\r\n                        maximumNumber = config.maxConsecutiveKicks;\r\n                        break;\r\n                    case ENoteTypes.rest:\r\n                        if (config.restNoteCountEnabled) {\r\n                            note.noteType = ENoteTypes.none;\r\n                            optionsChecked.push(noteType);\r\n                            continue;\r\n                        }\r\n                        maximumNumber = config.maxConsecutiveRests;\r\n                        break;\r\n                }\r\n                \r\n                const noteIsSameNoteType = (note: Note): boolean => {\r\n                    return note.noteType === noteType;\r\n                };\r\n\r\n                if (!noteVarietyDoesNotExceedConsecutiveCount(measure, maximumNumber, noteIsSameNoteType)) {\r\n                    note.noteType = ENoteTypes.none;\r\n                    optionsChecked.push(noteType);\r\n                } else {\r\n                    acceptableNoteFound = true;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return measure;\r\n};\r\n\r\nconst addMandatoryNotesToEmptyMeasure = (measure: Measure, noteType: ENoteTypes, mandatoryNotes: ENotePlacement[]) => {\r\n    mandatoryNotes.forEach((placement) => {\r\n        const index = mapNotePlacementToIndex(placement);\r\n        const noteAtIndex = measure.notes[index];\r\n\r\n        noteAtIndex.placedByUser = true;\r\n        noteAtIndex.noteType = noteType;\r\n    });\r\n};\r\n\r\nconst addNoteCountToMeasure = (measure: Measure,\r\n                               config: GenerateSheetMusicConfig,\r\n                               noteType: ENoteTypes | null, \r\n                               accent: EAccents | null,\r\n                               sticking: EStickings | null, \r\n                               getNoteToUpdate: (measure: Measure, config: GenerateSheetMusicConfig) => Note,\r\n                               count: number) => {\r\n    for (let i = 0; i < count; i++) {\r\n        const noteToUpdate = getNoteToUpdate(measure, config);\r\n        noteToUpdate.noteType = noteType == null ? noteToUpdate.noteType : noteType;\r\n        noteToUpdate.accent = accent == null ? noteToUpdate.accent : accent;\r\n        noteToUpdate.sticking = sticking == null ? noteToUpdate.sticking : sticking;\r\n    }\r\n};\r\n\r\nconst mapNotePlacementToIndex = (placement: ENotePlacement) => {\r\n    switch (placement) {\r\n        case ENotePlacement.one:\r\n            return 0;\r\n        case ENotePlacement.oneE:\r\n            return 1;\r\n        case ENotePlacement.oneAnd:\r\n            return 2;\r\n        case ENotePlacement.oneA:\r\n            return 3;\r\n        case ENotePlacement.two:\r\n            return 4;\r\n        case ENotePlacement.twoE:\r\n            return 5;\r\n        case ENotePlacement.twoAnd:\r\n            return 6;\r\n        case ENotePlacement.twoA:\r\n            return 7;\r\n        case ENotePlacement.three:\r\n            return 8;\r\n        case ENotePlacement.threeE:\r\n            return 9;\r\n        case ENotePlacement.threeAnd:\r\n            return 10;\r\n        case ENotePlacement.threeA:\r\n            return 11;\r\n        case ENotePlacement.four:\r\n            return 12;\r\n        case ENotePlacement.fourE:\r\n            return 13;\r\n        case ENotePlacement.fourAnd:\r\n            return 14;\r\n        case ENotePlacement.fourA:\r\n            return 15;\r\n    }\r\n};\r\n\r\nconst noteVarietyDoesNotExceedConsecutiveCount = (measure: Measure, maximumNumber: number, isNoteVariety: (note: Note) => boolean) => {\r\n    let consecutiveCount = 0;\r\n    let hasNotSurpassedConsecutiveCount = true;\r\n    measure.notes.forEach((note) => {\r\n        if (isNoteVariety(note)) {\r\n            consecutiveCount += 1;\r\n        } else {\r\n            consecutiveCount = 0;\r\n        }\r\n        \r\n        if (consecutiveCount > maximumNumber) {\r\n            hasNotSurpassedConsecutiveCount = false;\r\n        }\r\n    });\r\n    return hasNotSurpassedConsecutiveCount;\r\n};\r\n\r\nexport default ExerciseEngine;","import EStickingStyle from '../Enums/EStickingStyle';\r\nimport ENotePlacement from '../Enums/ENotePlacement';\r\nimport Header from \"./Header\";\r\n\r\nclass GenerateSheetMusicConfig {\r\n    \r\n    maxConsecutiveKicks: number;\r\n    maxConsecutiveAccents: number;\r\n    maxConsecutiveSnares: number;\r\n    maxConsecutiveRests: number;\r\n    maxConsecutiveLeftHandStickings: number;\r\n    maxConsecutiveRightHandStickings: number;\r\n    \r\n    kickNoteCount: number;\r\n    snareNoteCount: number;\r\n    accentNoteCount: number;\r\n    restNoteCount: number;\r\n    \r\n    kickNoteCountEnabled: boolean;\r\n    snareNoteCountEnabled: boolean;\r\n    accentNoteCountEnabled: boolean;\r\n    restNoteCountEnabled: boolean;\r\n    \r\n    mandatoryKickPlacements: ENotePlacement[];\r\n    mandatorySnarePlacements: ENotePlacement[];\r\n    mandatoryAccentPlacements: ENotePlacement[];\r\n    mandatoryRestPlacements: ENotePlacement[];\r\n    \r\n    stickingStyle: EStickingStyle;\r\n    \r\n    subdivision: number;\r\n    \r\n    header: Header;\r\n\r\n    constructor(header: Header,\r\n                maxConsecutiveKicks: number = 16,\r\n                maxConsecutiveAccents: number = 16,\r\n                maxConsecutiveSnares: number = 16,\r\n                maxConsecutiveRests: number = 16,\r\n                maxConsecutiveLeftHandStickings: number = 16,\r\n                maxConsecutiveRightHandStickings: number = 16,\r\n                kickNoteCount: number = 0,\r\n                snareNoteCount: number = 0,\r\n                accentNoteCount: number = 0,\r\n                restNoteCount: number = 0,\r\n                kickNoteCountEnabled: boolean = false,\r\n                snareNoteCountEnabled: boolean = false,\r\n                accentNoteCountEnabled: boolean = false,\r\n                restNoteCountEnabled: boolean = false,\r\n                mandatoryKickPlacements: ENotePlacement[] = [],\r\n                mandatorySnarePlacements: ENotePlacement[] = [],\r\n                mandatoryAccentPlacements: ENotePlacement[] = [],\r\n                mandatoryRestPlacements: ENotePlacement[] = [],\r\n                stickingStyle: EStickingStyle = EStickingStyle.none) {\r\n\r\n        this.header = header;\r\n        this.maxConsecutiveKicks = maxConsecutiveKicks;\r\n        this.maxConsecutiveAccents = maxConsecutiveAccents;\r\n        this.maxConsecutiveSnares = maxConsecutiveSnares;\r\n        this.maxConsecutiveRests = maxConsecutiveRests;\r\n        this.maxConsecutiveLeftHandStickings = maxConsecutiveLeftHandStickings;\r\n        this.maxConsecutiveRightHandStickings = maxConsecutiveRightHandStickings;\r\n        this.kickNoteCount = kickNoteCount;\r\n        this.snareNoteCount = snareNoteCount;\r\n        this.accentNoteCount = accentNoteCount;\r\n        this.restNoteCount = restNoteCount;\r\n        this.kickNoteCountEnabled = kickNoteCountEnabled;\r\n        this.snareNoteCountEnabled = snareNoteCountEnabled;\r\n        this.accentNoteCountEnabled = accentNoteCountEnabled;\r\n        this.restNoteCountEnabled = restNoteCountEnabled;\r\n        this.mandatoryKickPlacements = mandatoryKickPlacements;\r\n        this.mandatorySnarePlacements = mandatorySnarePlacements;\r\n        this.mandatoryAccentPlacements = mandatoryAccentPlacements;\r\n        this.mandatoryRestPlacements = mandatoryRestPlacements;\r\n        this.stickingStyle = stickingStyle;\r\n        \r\n        this.subdivision = this.header.translateLengthToInt();\r\n    }\r\n}\r\n\r\nexport default GenerateSheetMusicConfig;","import ENoteDuration from '../Enums/ENoteDuration';\r\n\r\nclass Header {\r\n\r\n    title: string;\r\n    meter: string;\r\n    composer: string;\r\n    key: string;\r\n    length: ENoteDuration;\r\n\r\n\r\n    constructor(title: string, meter: string = '4/4', composer: string = '', key: string = 'C', length: ENoteDuration = ENoteDuration.sixteenth) {\r\n        this.title = title;\r\n        this.meter = meter;\r\n        this.composer = composer;\r\n        this.key = key;\r\n        this.length = length;\r\n    }\r\n    \r\n    translateLengthToInt() {\r\n        switch (this.length) {\r\n            case ENoteDuration.sixteenth:\r\n                return 16;\r\n            default:\r\n                throw Error('Unsupported subdivision');\r\n        }\r\n    }\r\n\r\n    translateLengthToFractionString() {\r\n        switch (this.length) {\r\n            case ENoteDuration.sixteenth:\r\n                return '1/16';\r\n            default:\r\n                throw Error('Unsupported subdivision');\r\n        }\r\n    }\r\n}\r\n\r\nexport default Header;","import {\r\n    Card,\r\n    CardContent,\r\n    FormControl, FormControlLabel,\r\n    FormLabel,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select, Switch, CardHeader\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport GenerateSheetMusicConfig from \"../models/GenerateSheetMusicConfig\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\ninterface RadioButtonArrayTabProps {\r\n    config: GenerateSheetMusicConfig;\r\n    setConfig: (arg: GenerateSheetMusicConfig) => void;\r\n    selection: string;\r\n    setSelection: (arg: string) => void;\r\n    mode: string;\r\n    description: string,\r\n    title: string,\r\n}\r\n\r\nexport default function NumberSelectTab(props: RadioButtonArrayTabProps) {\r\n\r\n    const {config, setConfig, selection, setSelection, mode, description, title} = props;\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [descriptionOpen, setDescriptionOpen] = React.useState(false);\r\n\r\n    const getConfigFieldFromSelection = (selection: string, mode: string, config: GenerateSheetMusicConfig) => {\r\n        switch (selection) {\r\n            case 'snare':\r\n                return mode === 'consecutive' ? config.maxConsecutiveSnares : config.snareNoteCount;\r\n            case 'kick':\r\n                return mode === 'consecutive' ? config.maxConsecutiveKicks : config.kickNoteCount;\r\n            case 'rests':\r\n                return mode === 'consecutive' ? config.maxConsecutiveRests : config.restNoteCount;\r\n            case 'accents':\r\n                return mode === 'consecutive' ? config.maxConsecutiveAccents : config.accentNoteCount;\r\n            case 'right':\r\n                return config.maxConsecutiveRightHandStickings;\r\n            case 'left':\r\n                return config.maxConsecutiveLeftHandStickings;\r\n            default:\r\n                return mode === 'consecutive' ? 16 : 0;\r\n        }\r\n    };\r\n\r\n    const setConfigFieldFromSelection = (value: number, selection: string, mode: string, config: GenerateSheetMusicConfig) => {\r\n        switch (selection) {\r\n            case 'snare':\r\n                mode === 'consecutive' ? config.maxConsecutiveSnares = value : config.snareNoteCount = value;\r\n                break;\r\n            case 'kick':\r\n                mode === 'consecutive' ? config.maxConsecutiveKicks = value : config.kickNoteCount = value;\r\n                break;\r\n            case 'rests':\r\n                mode === 'consecutive' ? config.maxConsecutiveRests = value : config.restNoteCount = value;\r\n                break;\r\n            case 'accents':\r\n                mode === 'consecutive' ? config.maxConsecutiveAccents = value : config.accentNoteCount = value;\r\n                break;\r\n            case 'right':\r\n                config.maxConsecutiveRightHandStickings = value;\r\n                break;\r\n            case 'left':\r\n                config.maxConsecutiveLeftHandStickings = value;\r\n                break;\r\n        }\r\n    };\r\n    \r\n    const value = getConfigFieldFromSelection(selection, mode, config);\r\n\r\n    const onChange = (event: any) => {\r\n        setConfigFieldFromSelection(event.target.value, selection, mode, config);\r\n        let newConfig = {...config, header: config.header};\r\n        setConfig(newConfig);\r\n    };\r\n\r\n    const hitSelectionChange = (event: any) => {\r\n        setSelection(event.target.value);\r\n    };\r\n\r\n    const handleCheckbox = (event: any) => {\r\n        switch (selection) {\r\n            case 'snare':\r\n                config.snareNoteCountEnabled = event.target.checked;\r\n                break;\r\n            case 'kick':\r\n                config.kickNoteCountEnabled = event.target.checked;\r\n                break;\r\n            case 'accents':\r\n                config.accentNoteCountEnabled = event.target.checked;\r\n                break;\r\n            case 'rests':\r\n                config.restNoteCountEnabled = event.target.checked;\r\n                break;\r\n        }\r\n\r\n        let newConfig = {...config, header: config.header};\r\n        setConfig(newConfig);\r\n    };\r\n    \r\n    let checked = false;\r\n    switch (selection) {\r\n        case 'snare':\r\n            checked = config.snareNoteCountEnabled;\r\n            break;\r\n        case 'kick':\r\n            checked = config.kickNoteCountEnabled;\r\n            break;\r\n        case 'accents':\r\n            checked = config.accentNoteCountEnabled;\r\n            break;\r\n        case 'rests':\r\n            checked = config.restNoteCountEnabled;\r\n            break;\r\n    }\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                },\r\n            },\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: 120,\r\n            },\r\n            cardRoot: {\r\n                display: 'flex',\r\n                marginTop: '50px',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            },\r\n            paper: {\r\n                position: 'absolute',\r\n                width: 600,\r\n                backgroundColor: theme.palette.background.paper,\r\n                border: '2px solid #000',\r\n                boxShadow: theme.shadows[5],\r\n                padding: theme.spacing(2, 4, 3),\r\n            },\r\n            bullet: {\r\n                display: 'inline-block',\r\n                margin: '0 2px',\r\n                transform: 'scale(0.8)',\r\n            },\r\n            title: {\r\n                fontSize: 14,\r\n            },\r\n            pos: {\r\n                marginBottom: 12,\r\n            },\r\n            input: {\r\n                width: 42,\r\n                height: 42,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const handleHitNumberChange = (event: any) => {\r\n        onChange(event);\r\n    };\r\n\r\n    function rand() {\r\n        return Math.round(Math.random() * 20) - 10;\r\n    }\r\n\r\n    function getModalStyle() {\r\n        const top = 50 + rand();\r\n        const left = 50 + rand();\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    const handleDescriptionClick = (event: any) => {\r\n        setDescriptionOpen(true);\r\n    };\r\n\r\n    const handleDescriptionClose = (event: any) => {\r\n        setDescriptionOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n        <Card className={classes.cardRoot}>\r\n            <CardHeader title={title}/>\r\n            <CardContent>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">Hit Type</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={selection}\r\n                        onChange={hitSelectionChange}\r\n                    >\r\n                        <MenuItem value={'snare'}>Snare</MenuItem>\r\n                        <MenuItem value={'kick'}>Kick</MenuItem>\r\n                        <MenuItem value={'rests'}>Rests</MenuItem>\r\n                        <MenuItem value={'accents'}>Accents</MenuItem>\r\n                        {mode === 'consecutive' &&\r\n                        <MenuItem value={'right'}>Right Hand Sticking</MenuItem>}\r\n                        {mode === 'consecutive' &&\r\n                        <MenuItem value={'left'}>Left Hand Sticking</MenuItem>}\r\n                    </Select>\r\n                    {mode !== 'consecutive' &&\r\n                    <FormControlLabel label=\"Enable\"\r\n                                      control={<Switch checked={checked} onChange={handleCheckbox} name=\"enable\"/>}/>}\r\n                </FormControl>\r\n                <FormControl component=\"fieldset\">\r\n                    {mode === 'consecutive' &&\r\n                    <FormLabel component=\"legend\">Maximum Number of Consecutive Notes Allowed</FormLabel>}\r\n                    {mode !== 'consecutive' &&\r\n                    <FormLabel component=\"legend\">Exact Number of Notes Allowed</FormLabel>}\r\n                    <Select\r\n                        labelId=\"hit-select\"\r\n                        id=\"hit-select\"\r\n                        value={value}\r\n                        onChange={handleHitNumberChange}\r\n                    >\r\n                        <MenuItem value={1}>1</MenuItem>\r\n                        <MenuItem value={2}>2</MenuItem>\r\n                        <MenuItem value={3}>3</MenuItem>\r\n                        <MenuItem value={4}>4</MenuItem>\r\n                        <MenuItem value={5}>5</MenuItem>\r\n                        <MenuItem value={6}>6</MenuItem>\r\n                        <MenuItem value={7}>7</MenuItem>\r\n                        <MenuItem value={8}>8</MenuItem>\r\n                        <MenuItem value={9}>9</MenuItem>\r\n                        <MenuItem value={10}>10</MenuItem>\r\n                        <MenuItem value={11}>11</MenuItem>\r\n                        <MenuItem value={12}>12</MenuItem>\r\n                        <MenuItem value={13}>13</MenuItem>\r\n                        <MenuItem value={14}>14</MenuItem>\r\n                        <MenuItem value={15}>15</MenuItem>\r\n                        <MenuItem value={16}>16</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </CardContent>\r\n        </Card>\r\n            <div>\r\n                <button onClick={handleDescriptionClick}>Help</button>\r\n                <Modal open={descriptionOpen} onClose={handleDescriptionClose}>\r\n                    <div style={modalStyle} className={classes.paper}>\r\n                        <h2>{mode === 'consecutive'? `Maximum Consecutive Hit Description` : `Exact Note Number Description`}</h2>\r\n                        <p>{description}</p>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select, Switch,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\r\nimport GenerateSheetMusicConfig from \"../models/GenerateSheetMusicConfig\";\r\nimport ENotePlacement from \"../Enums/ENotePlacement\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\ninterface SwitchArrayTabProps {\r\n    selection: string;\r\n    setSelection: (arg: string) => void;\r\n    config: GenerateSheetMusicConfig;\r\n    description: string;\r\n    help: string;\r\n    setConfig: (arg: GenerateSheetMusicConfig) => void;\r\n    title: string,\r\n}\r\n\r\nexport default function SwitchArrayTab(props: SwitchArrayTabProps) {\r\n\r\n    const {selection, setSelection, config, setConfig, description, help, title} = props;\r\n    const [descriptionOpen, setDescriptionOpen] = React.useState(false);\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n\r\n    const getConfigFieldFromSelection = (selection: string, switchIdentifier: ENotePlacement, config: GenerateSheetMusicConfig) => {\r\n        switch (selection) {\r\n            case 'snare':\r\n                return config.mandatorySnarePlacements.find((item) => {\r\n                    return item === switchIdentifier\r\n                }) != null;\r\n            case 'kick':\r\n                return config.mandatoryKickPlacements.find((item) => {\r\n                    return item === switchIdentifier\r\n                }) != null;\r\n            case 'rests':\r\n                return config.mandatoryRestPlacements.find((item) => {\r\n                    return item === switchIdentifier\r\n                }) != null;\r\n            case 'accents':\r\n                return config.mandatoryAccentPlacements.find((item) => {\r\n                    return item === switchIdentifier\r\n                }) != null;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const addConfigFieldFromSelection = (value: ENotePlacement, selection: string, config: GenerateSheetMusicConfig) => {\r\n        switch (selection) {\r\n            case 'snare':\r\n                if (!config.mandatorySnarePlacements.includes(value)) {\r\n                    config.mandatorySnarePlacements.push(value);\r\n                }\r\n                break;\r\n            case 'kick':\r\n                if (!config.mandatoryKickPlacements.includes(value)) {\r\n                    config.mandatoryKickPlacements.push(value);\r\n                }\r\n                break;\r\n            case 'rests':\r\n                if (!config.mandatoryRestPlacements.includes(value)) {\r\n                    config.mandatoryRestPlacements.push(value);\r\n                }\r\n                break;\r\n            case 'accents':\r\n                if (!config.mandatoryAccentPlacements.includes(value)) {\r\n                    config.mandatoryAccentPlacements.push(value);\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const removeConfigFieldFromSelection = (value: ENotePlacement, selection: string, config: GenerateSheetMusicConfig) => {\r\n        let index = 0;\r\n        switch (selection) {\r\n            case 'snare':\r\n                index = config.mandatorySnarePlacements.findIndex((item) => {\r\n                    return item === value\r\n                });\r\n                config.mandatorySnarePlacements.splice(index, 1);\r\n                break;\r\n            case 'kick':\r\n                index = config.mandatoryKickPlacements.findIndex((item) => {\r\n                    return item === value\r\n                });\r\n                config.mandatoryKickPlacements.splice(index, 1);\r\n                break;\r\n            case 'rests':\r\n                index = config.mandatoryRestPlacements.findIndex((item) => {\r\n                    return item === value\r\n                });\r\n                config.mandatoryRestPlacements.splice(index, 1);\r\n                break;\r\n            case 'accents':\r\n                index = config.mandatoryAccentPlacements.findIndex((item) => {\r\n                    return item === value\r\n                });\r\n                config.mandatoryAccentPlacements.splice(index, 1);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                display: 'flex',\r\n                marginTop: '50px',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                },\r\n            },\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: 120,\r\n            },\r\n            cardRoot: {\r\n                display: 'flex',\r\n                marginTop: '50px',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            },\r\n            paper: {\r\n                position: 'absolute',\r\n                width: 600,\r\n                backgroundColor: theme.palette.background.paper,\r\n                border: '2px solid #000',\r\n                boxShadow: theme.shadows[5],\r\n                padding: theme.spacing(2, 4, 3),\r\n            },\r\n            bullet: {\r\n                display: 'inline-block',\r\n                margin: '0 2px',\r\n                transform: 'scale(0.8)',\r\n            },\r\n            title: {\r\n                fontSize: 14,\r\n            },\r\n            pos: {\r\n                marginBottom: 12,\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    const selectionChange = (event: any) => {\r\n        setSelection(event.target.value);\r\n    };\r\n\r\n    const handleChange = (event: any) => {\r\n        const notePlacement: ENotePlacement = parseInt(ENotePlacement[event.target.name]);\r\n        if (event.target.checked) {\r\n            addConfigFieldFromSelection(notePlacement, selection, config);\r\n        } else {\r\n            removeConfigFieldFromSelection(notePlacement, selection, config);\r\n        }\r\n\r\n        let newConfig = {...config, header: config.header};\r\n        setConfig(newConfig);\r\n    };\r\n\r\n    function rand() {\r\n        return Math.round(Math.random() * 20) - 10;\r\n    }\r\n\r\n    function getModalStyle() {\r\n        const top = 50 + rand();\r\n        const left = 50 + rand();\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    const handleDescriptionClick = (event: any) => {\r\n        setDescriptionOpen(true);\r\n    };\r\n\r\n    const handleDescriptionClose = (event: any) => {\r\n        setDescriptionOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.cardRoot}>\r\n                <CardHeader title={title}/>\r\n                <CardContent>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-label\">Hit Type</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={selection}\r\n                            onChange={selectionChange}\r\n\r\n                        >\r\n                            <MenuItem value={'snare'}>Snare</MenuItem>\r\n                            <MenuItem value={'kick'}>Kick</MenuItem>\r\n                            <MenuItem value={'rests'}>Rests</MenuItem>\r\n                            <MenuItem value={'accents'}>Accents</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"/>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.one, config)}\r\n                                    onChange={handleChange} name=\"one\"/>}\r\n                                label=\"1\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.oneE, config)}\r\n                                    onChange={handleChange} name=\"oneE\"/>}\r\n                                label=\"1E\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.oneAnd, config)}\r\n                                    onChange={handleChange} name=\"oneAnd\"/>}\r\n                                label=\"1&\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.oneA, config)}\r\n                                    onChange={handleChange} name=\"oneA\"/>}\r\n                                label=\"1A\"\r\n                            />\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"/>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.two, config)}\r\n                                    onChange={handleChange} name=\"two\"/>}\r\n                                label=\"2\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.twoE, config)}\r\n                                    onChange={handleChange} name=\"twoE\"/>}\r\n                                label=\"2E\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.twoAnd, config)}\r\n                                    onChange={handleChange} name=\"twoAnd\"/>}\r\n                                label=\"2&\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.twoA, config)}\r\n                                    onChange={handleChange} name=\"twoA\"/>}\r\n                                label=\"2A\"\r\n                            />\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"/>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.three, config)}\r\n                                    onChange={handleChange} name=\"three\"/>}\r\n                                label=\"3\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.threeE, config)}\r\n                                    onChange={handleChange} name=\"threeE\"/>}\r\n                                label=\"3E\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.threeAnd, config)}\r\n                                    onChange={handleChange} name=\"threeAnd\"/>}\r\n                                label=\"3&\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.threeA, config)}\r\n                                    onChange={handleChange} name=\"threeA\"/>}\r\n                                label=\"3A\"\r\n                            />\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"/>\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.four, config)}\r\n                                    onChange={handleChange} name=\"four\"/>}\r\n                                label=\"4\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.fourE, config)}\r\n                                    onChange={handleChange} name=\"fourE\"/>}\r\n                                label=\"4E\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.fourAnd, config)}\r\n                                    onChange={handleChange} name=\"fourAnd\"/>}\r\n                                label=\"4&\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Switch\r\n                                    checked={getConfigFieldFromSelection(selection, ENotePlacement.fourA, config)}\r\n                                    onChange={handleChange} name=\"fourA\"/>}\r\n                                label=\"4A\"\r\n                            />\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </CardContent>\r\n            </Card>\r\n            <div>\r\n                <button onClick={handleDescriptionClick}>Help</button>\r\n                <Modal open={descriptionOpen} onClose={handleDescriptionClose}>\r\n                    <div style={modalStyle} className={classes.paper}>\r\n                        <h2>Hit Placement Description</h2>\r\n                        <p>{description}</p>\r\n                        <h2>Musical Notation Help</h2>\r\n                        <p>{help}</p>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","class AudioSampler {\r\n\r\n    context: AudioContext;\r\n    buffer: AudioBuffer;\r\n    source: AudioBufferSourceNode;\r\n    gain: GainNode;\r\n\r\n    constructor (context: AudioContext, buffer: AudioBuffer) {\r\n        this.context = context;\r\n        this.buffer = buffer;\r\n        this.source = this.context.createBufferSource();\r\n        this.gain = context.createGain();\r\n    }\r\n\r\n    setup() {\r\n        this.source = this.context.createBufferSource();\r\n        this.source.buffer = this.buffer;\r\n        this.source.connect(this.gain);\r\n        this.gain.connect(this.context.destination);\r\n        // this.source.connect(this.context.destination);\r\n    }\r\n\r\n    trigger(time: number, gain: number) {\r\n        this.setup();\r\n        this.gain.gain.setValueAtTime(gain, time);\r\n        this.source.start(time);\r\n        this.gain.gain.setValueAtTime(1, time + 0.1);\r\n        // this.source.stop(time + 0.1)\r\n    }\r\n}\r\n\r\nexport default AudioSampler;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport Abcjs from 'react-abcjs';\r\nimport Exercise from './models/Exercise';\r\nimport ExerciseEngine from './engines/ExcerciseEngine';\r\nimport GenerateSheetMusicConfig from './models/GenerateSheetMusicConfig';\r\nimport Header from \"./models/Header\";\r\nimport NumberSelectTab from './commonComponents/NumberSelectTab';\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent, CardHeader,\r\n    FormControl, FormControlLabel,\r\n    FormLabel,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select, Switch,\r\n    Tab,\r\n    Tabs,\r\n    TextField,\r\n    Tooltip,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport SwitchArrayTab from \"./commonComponents/SwitchArrayTab\";\r\nimport ValidationEngine from \"./engines/ValidationEngine\";\r\nimport EStickingStyle from \"./Enums/EStickingStyle\";\r\nimport AudioSampler from \"./audioComponents/AudioSampler\";\r\nimport ENoteTypes from \"./Enums/ENoteTypes\";\r\nimport EAccents from \"./Enums/EAccents\";\r\nimport {\r\n    ConsecutiveNoteDescription,\r\n    MandatoryNoteMusicalHelp,\r\n    MandatoryNotePlacementDescription, ExactNumberNoteDescription,\r\n    PageDescription, StickingDescription\r\n} from \"./text/Descriptions\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nfunction App() {\r\n    const [savedExercises, setSavedExercises] = useState<Exercise[]>([]);\r\n    const [currentExercise, setCurrentExercise] = useState<Exercise | null>();\r\n    const [exercisesGenerated, setExercisesGenerated] = useState(1);\r\n    const [config, setConfig] = useState<GenerateSheetMusicConfig>(new GenerateSheetMusicConfig(new Header(`New Exercise: ${exercisesGenerated}`),));\r\n\r\n    const [constraintTabIndex, setConstraintTabIndex] = useState(0);\r\n    const [constraintOpen, setConstraintOpen] = useState(false);\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    \r\n    const [stickingDescriptionOpen, setStickingDescriptionOpen] = useState(false);\r\n    const [pageDescriptionOpen, setPageDescriptionOpen] = useState(false);\r\n    \r\n    const [consecutiveHitsSelection, setConsecutiveHitsSelection] = useState('kick');\r\n    const [noteCountSelection, setNoteCountSelection] = useState('kick');\r\n    const [mandatoryNotePlacementSelection, setMandatoryNotePlacementSelection] = useState('kick');\r\n\r\n    const [measureName, setMeasureName] = useState(`Exercise ${exercisesGenerated}`);\r\n    const [errorList, setErrorList] = useState<string[]>([]);\r\n    const [hiHatOnPlayback, setHiHatOnPlayback] = useState(true);\r\n\r\n\r\n    const playTrack = (exercise: Exercise) => {\r\n\r\n        const quarterNoteInterval = 60 / exercise.bpm;\r\n        const sixteenthNoteInterval = quarterNoteInterval / 4;\r\n\r\n        const audioContext = new AudioContext();\r\n        // const kick = new Kick(audioContext);\r\n        // const snare = new Snare(audioContext);\r\n        // const now = audioContext.currentTime;\r\n\r\n        // kick.trigger(now);\r\n        // snare.trigger(now + 0.5);\r\n\r\n        const sampleLoader = (url: any, context: any, callback: any) => {\r\n            const request = new XMLHttpRequest();\r\n            request.open('get', url, true);\r\n            request.responseType = 'arraybuffer';\r\n            request.onload = () => {\r\n                context.decodeAudioData(request.response, (buffer: AudioBuffer) => {\r\n                    callback(buffer);\r\n                });\r\n            };\r\n            request.withCredentials = false;\r\n            request.send();\r\n        };\r\n\r\n        const hasAccents = exercise.measures[0].notes.findIndex((note) => {\r\n            return note.accent === EAccents.accented;\r\n        }) !== -1;\r\n\r\n        sampleLoader('snare.wav', audioContext, (buffer: AudioBuffer) => {\r\n            const snare = new AudioSampler(audioContext, buffer);\r\n\r\n\r\n            sampleLoader('hihat.wav', audioContext, (buffer: AudioBuffer) => {\r\n                const hiHat = new AudioSampler(audioContext, buffer);\r\n\r\n                sampleLoader('kick1.wav', audioContext, (buffer: AudioBuffer) => {\r\n                    const kick = new AudioSampler(audioContext, buffer);\r\n\r\n                    if (exercise != null) {\r\n                        exercise.measures[0].notes.forEach((note, index) => {\r\n                            if (note.noteType === ENoteTypes.snare) {\r\n                                const unaccentedHit = hasAccents ? 0.5 : 1;\r\n                                const gain = note.accent === EAccents.accented ? 2 : unaccentedHit;\r\n                                snare.trigger(audioContext.currentTime + sixteenthNoteInterval * index, gain);\r\n                            } else if (note.noteType === ENoteTypes.kick) {\r\n                                kick.trigger(audioContext.currentTime + sixteenthNoteInterval * index, 1);\r\n                            }\r\n\r\n                            if (index % 2 === 0 && hiHatOnPlayback) {\r\n                                hiHat.trigger(audioContext.currentTime + sixteenthNoteInterval * index, 1);\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        config.header.title = measureName;\r\n        let newConfig = {...config, header: config.header};\r\n        setConfig(newConfig);\r\n    }, [measureName]);\r\n\r\n    useEffect(() => {\r\n        const newErrorList: string[] = [];\r\n        ValidationEngine.configIsValid(config, newErrorList);\r\n        setErrorList(newErrorList);\r\n    }, [config]);\r\n\r\n    const saveExercise = () => {\r\n        if (currentExercise) {\r\n            setSavedExercises([...savedExercises, currentExercise]);\r\n            setExercisesGenerated(exercisesGenerated + 1);\r\n            setMeasureName(`Exercise ${exercisesGenerated + 1}`);\r\n            setCurrentExercise(null);\r\n        }\r\n    };\r\n\r\n    const removeExercise = () => {\r\n        setCurrentExercise(null);\r\n    };\r\n\r\n    const generateNewExercise = () => {\r\n        const exercise = ExerciseEngine.generateNewSheetMusic(config);\r\n        if (Array.isArray(exercise)) {\r\n            setErrorList(exercise);\r\n            return;\r\n        } else {\r\n            const abcjsString = exercise.abcjsString;\r\n            const measures = exercise.measures;\r\n            const newExercise = new Exercise(abcjsString, measures);\r\n            setCurrentExercise(newExercise);\r\n        }\r\n    };\r\n\r\n    const stickingSelectionChange = (event: any) => {\r\n        config.stickingStyle = parseInt(EStickingStyle[event.target.value]);\r\n        let newConfig = {...config, header: config.header};\r\n        setConfig(newConfig);\r\n    };\r\n\r\n    const measureNameChange = (event: any) => {\r\n        setMeasureName(event.target.value);\r\n    };\r\n\r\n    const updateHiHat = (event: any) => {\r\n        setHiHatOnPlayback(event.target.checked);\r\n    };\r\n\r\n    const useStyles = makeStyles((theme: Theme) =>\r\n        createStyles({\r\n            root: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                },\r\n            },\r\n            formControl: {\r\n                margin: theme.spacing(1),\r\n                minWidth: 120,\r\n            },\r\n            cardRoot: {\r\n                minWidth: 275,\r\n            },\r\n            bullet: {\r\n                display: 'inline-block',\r\n                margin: '0 2px',\r\n                transform: 'scale(0.8)',\r\n            },\r\n            title: {\r\n                fontSize: 14,\r\n            },\r\n            pos: {\r\n                marginBottom: 12,\r\n            },\r\n            toolTip: {\r\n                fontSize: 20,\r\n            },\r\n            paper: {\r\n                position: 'absolute',\r\n                width: '60%',\r\n                height: '60%',\r\n                backgroundColor: theme.palette.background.paper,\r\n                border: '2px solid #000',\r\n                boxShadow: theme.shadows[5],\r\n                padding: theme.spacing(2, 4, 3),\r\n            },\r\n        }),\r\n    );\r\n    const classes = useStyles();\r\n\r\n    interface TabPanelProps {\r\n        children?: React.ReactNode;\r\n        index: any;\r\n        value: any;\r\n    }\r\n\r\n    function TabPanel(props: TabPanelProps) {\r\n        const {children, value, index, ...other} = props;\r\n\r\n        return (\r\n            <div\r\n                role=\"tabpanel\"\r\n                hidden={value !== index}\r\n                id={`simple-tabpanel-${index}`}\r\n                aria-labelledby={`simple-tab-${index}`}\r\n                {...other}\r\n            >\r\n                {value === index && (\r\n                    <Box p={3}>\r\n                        <Typography>{children}</Typography>\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function tabProps(index: any) {\r\n        return {\r\n            id: `simple-tab-${index}`,\r\n            'aria-controls': `simple-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    const handleConstraintTabChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setConstraintTabIndex(newValue);\r\n    };\r\n\r\n    const bpmChange = (event: any) => {\r\n        if (currentExercise) {\r\n            let currentExerciseCopy = {\r\n                ...currentExercise,\r\n                bpm: parseInt(event.target.value),\r\n                measures: currentExercise.measures\r\n            };\r\n            setCurrentExercise(currentExerciseCopy);\r\n        }\r\n    };\r\n\r\n    function rand() {\r\n        return Math.round(Math.random() * 20) - 10;\r\n    }\r\n\r\n    function getModalStyle() {\r\n        const top = 50 + rand();\r\n        const left = 50 + rand();\r\n\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    const handleConstraintOpen = (event: any) => {\r\n        setConstraintOpen(true);\r\n    };\r\n\r\n    const handleConstraintClose = (event: any) => {\r\n        setConstraintOpen(false);\r\n    };\r\n    \r\n    const handleStickingDescriptionClick = (event: any) => {\r\n        setStickingDescriptionOpen(true);\r\n    };\r\n    \r\n    const handleStickingDescriptionClose = (event: any) => {\r\n        setStickingDescriptionOpen(false);\r\n    };\r\n    \r\n    const handlePageDescriptionClick = (event: any) => {\r\n        setPageDescriptionOpen(true);\r\n    };\r\n    \r\n    const handlePageDescriptionClose = (event: any) => {\r\n        setPageDescriptionOpen(false);\r\n    };\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <div className='App-header'>Random Drum Pattern Generator\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handlePageDescriptionClick}>What is this?</Button>\r\n                <Modal open={pageDescriptionOpen} onClose={handlePageDescriptionClose}>\r\n                    <div style={modalStyle} className={classes.paper}>\r\n                        <h2>What is this page and why does it exist?</h2>\r\n                        <p>{PageDescription}</p>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n            <Card className={classes.cardRoot}>\r\n                {savedExercises && savedExercises.length > 0 && <CardHeader title={'Saved Exercises'}/>}\r\n                <CardContent>\r\n                    {savedExercises.map((exercise) => {\r\n                        const deleteCallback = () => {\r\n                            const firstIndexOfExercise = savedExercises.indexOf(exercise);\r\n                            const savedExercisesCopy = [...savedExercises];\r\n                            savedExercisesCopy.splice(firstIndexOfExercise, 1);\r\n                            setSavedExercises(savedExercisesCopy);\r\n                        };\r\n                        const playCallback = () => {\r\n                            playTrack(exercise);\r\n                        };\r\n                        return (\r\n                            <Card className={classes.cardRoot}>\r\n                                <CardContent>\r\n                                    <div>\r\n                                        <Abcjs\r\n                                            abcNotation={exercise.sheetMusic}\r\n                                            parserParams={{}}\r\n                                            engraverParams={{responsive: 'resize'}}\r\n                                            renderParams={{viewportHorizontal: true}}\r\n                                        />\r\n                                        <Button variant=\"contained\" color=\"secondary\"\r\n                                                onClick={deleteCallback}>Delete</Button>\r\n                                        <Button variant=\"contained\" color=\"primary\"\r\n                                                onClick={playCallback}\r\n                                        >Play</Button>\r\n                                    </div>\r\n                                </CardContent>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Card className={classes.cardRoot}>\r\n                <CardHeader title={'Unsaved (Current) Exercise'}/>\r\n                {currentExercise &&\r\n                <CardContent>\r\n                    <Abcjs\r\n                        abcNotation={currentExercise.sheetMusic}\r\n                        parserParams={{}}\r\n                        engraverParams={{responsive: 'resize'}}\r\n                        renderParams={{viewportHorizontal: true}}\r\n                    />\r\n                    <Button variant=\"contained\" color=\"primary\"\r\n                            onClick={() => {\r\n                                playTrack(currentExercise)\r\n                            }}\r\n                    >PLAY</Button>\r\n                    <TextField style={{marginLeft: '18px'}} value={currentExercise.bpm} onChange={bpmChange}\r\n                               id=\"standard-basic\" label=\"BPM of Playback\"/>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={hiHatOnPlayback} onChange={updateHiHat} name=\"oneAnd\"/>}\r\n                        label=\"Enable Hi-Hat on playback?\"\r\n                    />\r\n                </CardContent>\r\n                }\r\n            </Card>\r\n\r\n            <Card className={classes.cardRoot}>\r\n                <CardContent>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Generation Controls</FormLabel>\r\n                        <TextField value={measureName} onChange={measureNameChange} id=\"standard-basic\"\r\n                                   label=\"Pattern Name\"/>\r\n                        <CardActions>\r\n                            <Tooltip title={<span style={{fontSize: '18px'}}>{errorList}</span>}>\r\n                                    <span style={{cursor: 'not-allowed'}}>\r\n                                    <Button disabled={errorList.length > 0} variant=\"contained\"\r\n                                            onClick={generateNewExercise}>Generate Measure</Button>\r\n                                    </span>\r\n                            </Tooltip>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={saveExercise}>Save</Button>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={removeExercise}>Remove</Button>\r\n                            <Button variant=\"contained\" color=\"primary\"\r\n                                    onClick={handleConstraintOpen}>Configure</Button>\r\n                            <Modal open={constraintOpen} onClose={handleConstraintClose}>\r\n                                <div style={modalStyle} className={classes.paper}>\r\n                                    <AppBar>\r\n                                        <Tabs value={constraintTabIndex} onChange={handleConstraintTabChange}\r\n                                              aria-label=\"configuration\">\r\n                                            <Tab label=\"Consecutive Notes\" {...tabProps(0)} />\r\n                                            <Tab label=\"Total Number of Notes\" {...tabProps(1)} />\r\n                                            <Tab label=\"Hit Placement\" {...tabProps(2)} />\r\n                                            <Tab label=\"Sticking Style\" {...tabProps(3)} />\r\n                                        </Tabs>\r\n                                    </AppBar>\r\n                                    <TabPanel value={constraintTabIndex} index={0}>\r\n                                        <NumberSelectTab mode={'consecutive'} selection={consecutiveHitsSelection}\r\n                                                         title={'Specify Maximum Consecutive Notes For A Drum Sound'}\r\n                                                         setSelection={setConsecutiveHitsSelection} config={config}\r\n                                                         description={ConsecutiveNoteDescription}\r\n                                                         setConfig={setConfig}/>\r\n                                    </TabPanel>\r\n                                    <TabPanel value={constraintTabIndex} index={1}>\r\n                                        <NumberSelectTab mode={'noteCount'} selection={noteCountSelection}\r\n                                                         title={'Specify Exact Note Count For A Drum Sound'}\r\n                                                         setSelection={setNoteCountSelection} config={config}\r\n                                                         description={ExactNumberNoteDescription}\r\n                                                         setConfig={setConfig}/>\r\n                                    </TabPanel>\r\n                                    <TabPanel value={constraintTabIndex} index={2}>\r\n                                        <SwitchArrayTab selection={mandatoryNotePlacementSelection}\r\n                                                        title={'Specify Mandatory Note Placements For A Drum Sound'}\r\n                                                        description={MandatoryNotePlacementDescription}\r\n                                                        help={MandatoryNoteMusicalHelp}\r\n                                                        setSelection={setMandatoryNotePlacementSelection}\r\n                                                        config={config}\r\n                                                        setConfig={setConfig}/>\r\n                                    </TabPanel>\r\n                                    <TabPanel value={constraintTabIndex} index={3}>\r\n                                        <div>\r\n                                            <Card style={{\r\n                                                display: 'flex',\r\n                                                marginTop: '50px',\r\n                                                justifyContent: 'center',\r\n                                                flexDirection: 'column',\r\n                                            }}>\r\n                                                <CardHeader title={'Specify A Sticking Type'}/>\r\n                                                <CardContent>\r\n                                                    <FormControl className={classes.formControl}>\r\n                                                        <InputLabel id=\"demo-simple-select-label\">Sticking\r\n                                                            Pattern</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-simple-select-label\"\r\n                                                            id=\"demo-simple-select\"\r\n                                                            value={EStickingStyle[config.stickingStyle]}\r\n                                                            onChange={stickingSelectionChange}\r\n                                                        >\r\n                                                            <MenuItem value={'none'}>None</MenuItem>\r\n                                                            <MenuItem value={'naturalSticking'}>Natural</MenuItem>\r\n                                                            <MenuItem value={'alternating'}>Alternating</MenuItem>\r\n                                                            <MenuItem value={'random'}>Random</MenuItem>\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                            <div>\r\n                                                <button onClick={handleStickingDescriptionClick}>Help</button>\r\n                                                <Modal open={stickingDescriptionOpen} onClose={handleStickingDescriptionClose}>\r\n                                                    <div style={modalStyle} className={classes.paper}>\r\n                                                        <h2>Sticking Type Description</h2>\r\n                                                        <p>{StickingDescription}</p>\r\n                                                    </div>\r\n                                                </Modal>\r\n                                            </div>\r\n                                        </div>\r\n                                    </TabPanel>\r\n                                </div>\r\n                            </Modal>\r\n                        </CardActions>\r\n                    </FormControl>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export const PageDescription = `This is a website I created to generate random drum patterns using Typescript. \r\nThe primary purpose was to give myself ideas for patterns to practice on the drums and to spur a bit of\r\ncreativity on days I'm feeling uninspired. This page will generate a random drum pattern in musical notation (for those unfamiliar\r\nwith drum notation, the bottom row represents the Kick or Bass drum, and the middle row represents the Snare Drum. The funky\r\nsquiggles represent rests (no drum is hit at that time). This page allows the user to put constraints on the patterns generated to allow\r\nfor incorporation of general ideas. For example, many modern drum beats incorporate a \"Backbeat\", which is characterized by snare\r\nhits on the 2 and 4 of a measure in 4/4 time. This page allows you to add that constraint to the patterns generated so that\r\nevery pattern will include a backbeat. I've also included a playback option to all the patterns generated so that you can hear \r\nwhat it sounds like. Adjusting the BPM (Beats Per Minute) will allow you to adjust the playback speed. Higher is faster.\r\nFor simplicity's sake, this page only supports linear drum patterns (drum patterns with only one \r\ndrum being hit at a time). However, I decided to add a toggle that will playback a hi-hat on the 8th notes to allow your \r\npatterns to sound like they have a bit more of a non-linear \"Drum Beat\" sound to them. You can save your current drum pattern,\r\nso that you can continue to look at it and play it back. However, I haven't implemented any type of local storage yet, so your\r\npatterns will disappear when you refresh the page. I recommend experimenting with generating\r\nbeats and messing around with the constraints and playback if this description seems unclear. Happy Drumming!\r\n`;\r\n\r\nexport const MandatoryNotePlacementDescription = `Adds a constraint that a specified drum hit must occur in the given\r\nlocation in the measure. The measure is represented as sixteen note placements, each represented with a slide toggle. \r\nThe patterns in this application are linear, so two drums cannot be hit at the same time. For example, You cannot place a kick and snare at the same time.\r\nThe exception to this rule is an accent, because an accent is a modifier to make another drum sound louder. \r\nYou may place an accent at the same time as other type, but it will currently only display for a snare hit. You will be\r\nunable to generate your pattern if you specify more total notes in this section than are allowed in the \"Total Number of Notes\"\r\nsection, and you will be unable to generate your pattern if you specify more consecutive notes than are allowed in the \r\n\"Consecutive Notes\" section.`;\r\n\r\n\r\nexport const MandatoryNoteMusicalHelp = `In case you are unfamiliar with musical notation, in 4/4 time (only currently supported time signature) a measure is divided into 4\r\nequal sections, or \"beats\". Each beat is further subdivided into 4 equal sections: Beat#, E, AND(&), A. Each division of the\r\nbeat is counted before moving on to the next beat. That would mean that \"1\" is the 1st location, \"1A\" is the 4th, \"3\" is the 9th, etc.\r\nThis application only supports subdivisions that can be represented as 16th notes (note: even \r\nsubdivisions longer than 16th notes are supported because you cannot hold a note on a drum, \r\nso a quarter note is represented as a sixteenth note followed by three 16th note rests).`;\r\n\r\nexport const ConsecutiveNoteDescription = `Specifies the maximum number of a particular sound that can be played in a row.\r\nFor example, specifying \"2 Kicks\" will disable any pattern containing 3 or more consecutive kick drum notes from being generated.\r\nThis will not allow a pattern to be generated if it conflicts with what you have specified in the \"Hit Placement\" section (i.e. \r\nyou have specified \"2 Kicks\" as your maximum consecutive note count, and have also\r\ntoggled on the kick to appear on beats 1, 1E, 1&). This will not allow a pattern to be generated if it conflicts\r\nwith the \"Total Number of Notes\" section (i.e. You have 16 kicks, which is every single note in the measure, selected as the\r\nTotal Number of Notes but have less than 16 as the maximum number of consecutive kicks)`;\r\n\r\nexport const ExactNumberNoteDescription = `Specifies the exact number of a particular sound that will appear in the generated\r\npattern. For example, specifying \"5 Kicks\" will disable any pattern containing 4 or less, as well as 6 or more total kick drums.\r\nThis setting can be disabled with a toggle switch, meaning the selected value is ignored if the switch is set to \"off\". This\r\nwill not allow a pattern to be generated if it conflicts with what you have specified in the \"Hit Placement\" section (i.e. you\r\nhave specified \"2 kicks\" as your Total Number of Notes, and have also toggled on the kick to appear on beats 2, 3, 4). This\r\nwill not allow a pattern to be generated if it conflicts with what you have specified in the Consecutive Notes section (i. e.\r\nYou have 16 kicks, which is every single note in the measure, selected as the Total Number of Notes but have less than 16 as the \r\nmaximum number of consecutive kicks)`;\r\n\r\nexport const StickingDescription = `More of a usage for drummers working on hand exercises, there is an option to allow for\r\nthe generated pattern to specify if a snare hit should be performed with the left hand or the right hand. None means that\r\nno hand suggestion is provided. Alternate sticking means that every snare hit should alternate between right and left, \r\nregardless of what is in the middle. Natural sticking means that every snare hit should be the right hand if it is in an\r\nodd location in the measure (beats and &'s) while the left hand should be used for even locations in the measure (E's and A's)\r\nFinally, random will fill in the values randomly, and will follow the rules you specify for each hand in the Consecutive Notes section`;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}